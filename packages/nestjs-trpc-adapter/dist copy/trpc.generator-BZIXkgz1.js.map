{"version":3,"file":"trpc.generator-BZIXkgz1.js","names":["TRPCGenerator","schemaImports?: Array<SchemaImports> | undefined","schemaImportNames: Array<string>","error: unknown","context?: Class<TRPCContext>","e: unknown","ConsoleLogger"],"sources":["../lib/generators/trpc.generator.ts"],"sourcesContent":["import * as path from \"node:path\";\nimport {\n  ConsoleLogger,\n  Inject,\n  Injectable,\n  type OnModuleInit,\n} from \"@nestjs/common\";\nimport { Project, SourceFile } from \"ts-morph\";\nimport { saveOrOverrideFile } from \"../utils/ts-morph.util\";\nimport { RouterGenerator } from \"./router.generator\";\nimport type { SchemaImports, TRPCContext } from \"../interfaces\";\nimport { MiddlewareGenerator } from \"./middleware.generator\";\nimport type { Class } from \"type-fest\";\nimport { ContextGenerator } from \"./context.generator\";\nimport { RouterFactory } from \"../factories/router.factory\";\nimport { MiddlewareFactory } from \"../factories/middleware.factory\";\nimport { ProcedureFactory } from \"../factories/procedure.factory\";\nimport { TRPC_MODULE_CALLER_FILE_PATH } from \"../trpc.constants\";\nimport type { SourceFileImportsMap } from \"../interfaces/generator.interface\";\nimport { StaticGenerator } from \"./static.generator\";\nimport { ImportsScanner } from \"../scanners/imports.scanner\";\nimport {\n  TYPESCRIPT_APP_ROUTER_SOURCE_FILE,\n  TYPESCRIPT_PROJECT,\n} from \"./generator.constants\";\nimport * as process from \"node:process\";\n\n@Injectable()\nexport class TRPCGenerator implements OnModuleInit {\n  private rootModuleImportsMap!: Map<string, SourceFileImportsMap>;\n  private readonly HELPER_TYPES_OUTPUT_FILE = \"index.ts\";\n  private readonly HELPER_TYPES_OUTPUT_PATH = path.join(\n    path.resolve(),\n    \"types\",\n  );\n\n  @Inject(TRPC_MODULE_CALLER_FILE_PATH)\n  private readonly moduleCallerFilePath!: string;\n\n  @Inject(TYPESCRIPT_PROJECT)\n  private readonly project!: Project;\n\n  @Inject(TYPESCRIPT_APP_ROUTER_SOURCE_FILE)\n  private readonly appRouterSourceFile!: SourceFile;\n\n  @Inject(ConsoleLogger)\n  private readonly consoleLogger!: ConsoleLogger;\n\n  @Inject(StaticGenerator)\n  private readonly staticGenerator!: StaticGenerator;\n\n  @Inject(MiddlewareGenerator)\n  private readonly middlewareHandler!: MiddlewareGenerator;\n\n  @Inject(ContextGenerator)\n  private readonly contextHandler!: ContextGenerator;\n\n  @Inject(RouterGenerator)\n  private readonly serializerHandler!: RouterGenerator;\n\n  @Inject(RouterFactory)\n  private readonly routerFactory!: RouterFactory;\n\n  @Inject(ProcedureFactory)\n  private readonly procedureFactory!: ProcedureFactory;\n\n  @Inject(MiddlewareFactory)\n  private readonly middlewareFactory!: MiddlewareFactory;\n\n  @Inject(ImportsScanner)\n  private readonly importsScanner!: ImportsScanner;\n\n  onModuleInit() {\n    this.rootModuleImportsMap = this.buildRootImportsMap();\n  }\n\n  public async generateSchemaFile(\n    schemaImports?: Array<SchemaImports> | undefined,\n  ): Promise<void> {\n    try {\n      const routers = this.routerFactory.getRouters();\n      const mappedRoutesAndProcedures = routers.map(route => {\n        const { instance, name, alias, path } = route;\n        const prototype = Object.getPrototypeOf(instance);\n        const procedures = this.procedureFactory.getProcedures(\n          instance,\n          prototype,\n        );\n\n        return { name, path, alias, instance: { ...route }, procedures };\n      });\n\n      this.staticGenerator.generateStaticDeclaration(this.appRouterSourceFile);\n\n      if (schemaImports != null && schemaImports.length > 0) {\n        const schemaImportNames: Array<string> = schemaImports.map(\n          schemaImport => (schemaImport as any).name,\n        );\n        this.staticGenerator.addSchemaImports(\n          this.appRouterSourceFile,\n          schemaImportNames,\n          this.rootModuleImportsMap,\n        );\n      }\n\n      const routersMetadata = this.serializerHandler.serializeRouters(\n        mappedRoutesAndProcedures,\n        this.project,\n      );\n\n      const routersStringDeclarations =\n        this.serializerHandler.generateRoutersStringFromMetadata(\n          routersMetadata,\n        );\n\n      this.appRouterSourceFile.addStatements(/* ts */ `\n        const appRouter = t.router({${routersStringDeclarations}});\n        export type AppRouter = typeof appRouter;\n      `);\n\n      await saveOrOverrideFile(this.appRouterSourceFile);\n\n      this.consoleLogger.log(\n        `AppRouter has been updated successfully at \"./${path.relative(process.cwd(), this.appRouterSourceFile.getFilePath())}\".`,\n        \"TRPC Generator\",\n      );\n    } catch (error: unknown) {\n      this.consoleLogger.warn(\"TRPC Generator encountered an error.\", error);\n    }\n  }\n\n  public async generateHelpersFile(\n    context?: Class<TRPCContext>,\n  ): Promise<void> {\n    try {\n      const middlewares = this.middlewareFactory.getMiddlewares();\n      const helperTypesSourceFile = this.project.createSourceFile(\n        path.resolve(\n          this.HELPER_TYPES_OUTPUT_PATH,\n          this.HELPER_TYPES_OUTPUT_FILE,\n        ),\n        undefined,\n        { overwrite: true },\n      );\n\n      if (context != null) {\n        const contextImport = this.rootModuleImportsMap.get(context.name);\n\n        if (contextImport == null) {\n          throw new Error(\"Could not find context import declaration.\");\n        }\n\n        const contextType = await this.contextHandler.getContextInterface(\n          contextImport.sourceFile,\n          context,\n        );\n\n        helperTypesSourceFile.addTypeAlias({\n          isExported: true,\n          name: \"Context\",\n          type: contextType ?? \"{}\",\n        });\n      }\n\n      for (const middleware of middlewares) {\n        const middlewareInterface =\n          await this.middlewareHandler.getMiddlewareInterface(\n            middleware.path,\n            middleware.instance,\n            this.project,\n          );\n\n        if (middlewareInterface != null) {\n          helperTypesSourceFile.addInterface({\n            isExported: true,\n            name: `${middlewareInterface.name}Context`,\n            extends: [\"Context\"],\n            properties: middlewareInterface.properties,\n          });\n        }\n      }\n\n      await saveOrOverrideFile(helperTypesSourceFile);\n\n      this.consoleLogger.log(\n        `Helper types has been updated successfully at \"nestjs-trpc/types\".`,\n        \"TRPC Generator\",\n      );\n    } catch (e: unknown) {\n      this.consoleLogger.warn(\"TRPC Generator encountered an error.\", e);\n    }\n  }\n\n  private buildRootImportsMap(): Map<string, SourceFileImportsMap> {\n    const rootModuleSourceFile = this.project.addSourceFileAtPathIfExists(\n      this.moduleCallerFilePath,\n    );\n\n    if (rootModuleSourceFile == null) {\n      throw new Error(\"Could not access root module file.\");\n    }\n\n    return this.importsScanner.buildSourceFileImportsMap(\n      rootModuleSourceFile,\n      this.project,\n    );\n  }\n}\n"],"mappings":"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"}