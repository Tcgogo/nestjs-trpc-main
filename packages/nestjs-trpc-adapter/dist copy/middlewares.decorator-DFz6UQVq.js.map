{"version":3,"file":"middlewares.decorator-DFz6UQVq.js","names":["target: any","key?: string | symbol","descriptor?: TypedPropertyDescriptor<any>","middleware: Constructor<TRPCMiddleware> | Record<string, unknown>"],"sources":["../lib/decorators/middlewares.decorator.ts"],"sourcesContent":["import type { Class, Constructor } from 'type-fest';\nimport type { TRPCMiddleware } from '../interfaces';\nimport { MIDDLEWARES_KEY } from '../trpc.constants';\nimport { isFunction } from 'lodash-es';\nimport { validateEach } from '../utils/validate-each.util';\n\n/**\n * TODO: Generate Return Context Type.\n *\n * Decorator that binds middlewares to the scope of the router or a procedure,\n * depending on its context.\n *\n * When `@UseMiddlewares` is used at the router level, the middleware will be\n * applied to every handler (method) in the router.\n *\n * When `@UseMiddlewares` is used at the individual handler level, the middleware\n * will apply only to that specific method.\n *\n * @param middlewares a single middleware instance or class, or a list of comma separated middleware instances\n * or classes.\n *\n * @see [Middlewares](https://nestjs-trpc.io/docs/middlewares)\n *\n * @publicApi\n */\nexport function UseMiddlewares(\n  ...middlewares: Array<Class<TRPCMiddleware> | Constructor<TRPCMiddleware>>\n): MethodDecorator & ClassDecorator {\n  return (\n    target: any,\n    key?: string | symbol,\n    descriptor?: TypedPropertyDescriptor<any>,\n  ) => {\n    const isMiddlewareValid = (\n      middleware: Constructor<TRPCMiddleware> | Record<string, unknown>,\n    ) =>\n      middleware &&\n      (isFunction(middleware) ||\n        isFunction((middleware as Record<string, any>).use));\n\n    if (descriptor) {\n      validateEach(\n        target.constructor,\n        middlewares,\n        isMiddlewareValid,\n        '@UseMiddlewares',\n        'middleware',\n      );\n      Reflect.defineMetadata(\n        MIDDLEWARES_KEY,\n        [...middlewares],\n        descriptor.value,\n      );\n      return descriptor;\n    }\n    validateEach(\n      target.constructor,\n      middlewares,\n      isMiddlewareValid,\n      '@UseMiddlewares',\n      'middleware',\n    );\n    Reflect.defineMetadata(MIDDLEWARES_KEY, [...middlewares], target);\n    return target;\n  };\n}\n\n/**\n * @deprecated Use `@UseMiddlewares` instead. This decorator is deprecated\n * in order to satisfy NestJS naming convention fe. `@UseGuards`.\n *\n * Decorator that binds middlewares to the scope of the router or a procedure,\n * depending on its context.\n *\n * When `@Middlewares` is used at the router level, the middleware will be\n * applied to every handler (method) in the router.\n *\n * When `@Middlewares` is used at the individual handler level, the middleware\n * will apply only to that specific method.\n *\n * @param middlewares a single middleware instance or class, or a list of comma separated middleware instances\n * or classes.\n *\n * @see [Middlewares](https://nestjs-trpc.io/docs/middlewares)\n *\n * @publicApi\n */\nexport function Middlewares(\n  ...middlewares: Array<Class<TRPCMiddleware> | Constructor<TRPCMiddleware>>\n): MethodDecorator & ClassDecorator {\n  return (\n    target: any,\n    key?: string | symbol,\n    descriptor?: TypedPropertyDescriptor<any>,\n  ) => {\n    const isMiddlewareValid = (\n      middleware: Constructor<TRPCMiddleware> | Record<string, unknown>,\n    ) =>\n      middleware &&\n      (isFunction(middleware) ||\n        isFunction((middleware as Record<string, any>).use));\n\n    if (descriptor) {\n      validateEach(\n        target.constructor,\n        middlewares,\n        isMiddlewareValid,\n        '@Middlewares',\n        'middleware',\n      );\n      Reflect.defineMetadata(\n        MIDDLEWARES_KEY,\n        [...middlewares],\n        descriptor.value,\n      );\n      return descriptor;\n    }\n    validateEach(\n      target.constructor,\n      middlewares,\n      isMiddlewareValid,\n      '@Middlewares',\n      'middleware',\n    );\n    Reflect.defineMetadata(MIDDLEWARES_KEY, [...middlewares], target);\n    return target;\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAAgB,eACd,GAAG,aAC+B;AAClC,QAAO,SACLA,QACAC,KACAC,YACG;EACH,MAAM,oBAAoB,SACxBC,YAEA;yBACC,WAAW,WAAW,IACrB,WAAY,WAAmC,IAAI;EAAC;AAExD,MAAI,YAAY;AACd,gBACE,OAAO,aACP,aACA,mBACA,mBACA,aACD;AACD,WAAQ,eACN,iBACA,CAAC,GAAG,WAAY,GAChB,WAAW,MACZ;AACD,UAAO;EACR;AACD,eACE,OAAO,aACP,aACA,mBACA,mBACA,aACD;AACD,UAAQ,eAAe,iBAAiB,CAAC,GAAG,WAAY,GAAE,OAAO;AACjE,SAAO;CACR;AACF;;;;;;;;;;;;;;;;;;;;;AAsBD,SAAgB,YACd,GAAG,aAC+B;AAClC,QAAO,SACLH,QACAC,KACAC,YACG;EACH,MAAM,oBAAoB,SACxBC,YAEA;yBACC,WAAW,WAAW,IACrB,WAAY,WAAmC,IAAI;EAAC;AAExD,MAAI,YAAY;AACd,gBACE,OAAO,aACP,aACA,mBACA,gBACA,aACD;AACD,WAAQ,eACN,iBACA,CAAC,GAAG,WAAY,GAChB,WAAW,MACZ;AACD,UAAO;EACR;AACD,eACE,OAAO,aACP,aACA,mBACA,gBACA,aACD;AACD,UAAQ,eAAe,iBAAiB,CAAC,GAAG,WAAY,GAAE,OAAO;AACjE,SAAO;CACR;AACF"}