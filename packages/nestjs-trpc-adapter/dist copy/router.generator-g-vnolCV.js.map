{"version":3,"file":"router.generator-g-vnolCV.js","names":["RouterGenerator","routers: Array<RoutersFactoryMetadata>","project: Project","routerFilePath: string","procedure: ProcedureFactoryMetadata","routerName: string","routers: Array<RouterGeneratorMetadata>","this"],"sources":["../lib/generators/router.generator.ts"],"sourcesContent":["import { Project } from 'ts-morph';\nimport type {\n  RouterGeneratorMetadata,\n  ProcedureGeneratorMetadata,\n} from '../interfaces/generator.interface';\nimport type {\n  RoutersFactoryMetadata,\n  ProcedureFactoryMetadata,\n} from '../interfaces/factory.interface';\nimport { DecoratorGenerator } from './decorator.generator';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { camelCase } from 'lodash-es';\nimport { ProcedureGenerator } from './procedure.generator';\n\n@Injectable()\nexport class RouterGenerator {\n  @Inject(DecoratorGenerator)\n  private readonly decoratorHandler!: DecoratorGenerator;\n\n  @Inject(ProcedureGenerator)\n  private readonly procedureGenerator!: ProcedureGenerator;\n\n  public serializeRouters(\n    routers: Array<RoutersFactoryMetadata>,\n    project: Project,\n  ): Array<RouterGeneratorMetadata> {\n    return routers.map((router) => {\n      const proceduresMetadata = router.procedures.map((procedure) =>\n        this.serializeRouterProcedures(\n          router.path,\n          procedure,\n          router.name,\n          project,\n        ),\n      );\n\n      return {\n        name: router.name,\n        alias: router.alias,\n        procedures: proceduresMetadata,\n      };\n    });\n  }\n\n  private serializeRouterProcedures(\n    routerFilePath: string,\n    procedure: ProcedureFactoryMetadata,\n    routerName: string,\n    project: Project,\n  ): ProcedureGeneratorMetadata {\n    const sourceFile = project.addSourceFileAtPath(routerFilePath);\n    const classDeclaration = sourceFile.getClass(routerName);\n\n    if (!classDeclaration) {\n      throw new Error(`Could not find router ${routerName} class declaration.`);\n    }\n\n    const methodDeclaration = classDeclaration.getMethod(procedure.name);\n\n    if (!methodDeclaration) {\n      throw new Error(`Could not find ${routerName}, method declarations.`);\n    }\n\n    const decorators = methodDeclaration.getDecorators();\n\n    if (!decorators) {\n      throw new Error(\n        `could not find ${methodDeclaration.getName()}, method decorators.`,\n      );\n    }\n\n    const serializedDecorators =\n      this.decoratorHandler.serializeProcedureDecorators(\n        decorators,\n        sourceFile,\n        project,\n      );\n\n    return {\n      name: procedure.name,\n      decorators: serializedDecorators,\n    };\n  }\n\n  public generateRoutersStringFromMetadata(\n    routers: Array<RouterGeneratorMetadata>,\n  ): string {\n    return routers\n      .map((router) => {\n        const { name, procedures, alias } = router;\n        return `${alias ?? camelCase(name)}: t.router({ ${procedures\n          .map(this.procedureGenerator.generateProcedureString)\n          .join(',\\n')} })`;\n      })\n      .join(',\\n');\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAeO,4BAAMA,kBAAgB;;2CAEV;2CAGA;;CAEjB,AAAO,iBACLC,SACAC,SACgC;;AAChC,SAAO,QAAQ,IAAI,SAAC,QAAW;GAC7B,MAAM,qBAAqB,OAAO,WAAW,IAAI,SAAC,WAChD;iBAAK,0BACH,OAAO,MACP,WACA,OAAO,MACP,QACD;KACF;AAED,UAAO;IACL,MAAM,OAAO;IACb,OAAO,OAAO;IACd,YAAY;GACb;EACF,EAAC;CACH;CAED,AAAQ,0BACNC,gBACAC,WACAC,YACAH,SAC4B;EAC5B,MAAM,aAAa,QAAQ,oBAAoB,eAAe;EAC9D,MAAM,mBAAmB,WAAW,SAAS,WAAW;AAExD,OAAK,iBACH,OAAM,IAAI,MAAM,CAAC,sBAAsB,EAAE,WAAW,mBAAmB,CAAC;EAG1E,MAAM,oBAAoB,iBAAiB,UAAU,UAAU,KAAK;AAEpE,OAAK,kBACH,OAAM,IAAI,MAAM,CAAC,eAAe,EAAE,WAAW,sBAAsB,CAAC;EAGtE,MAAM,aAAa,kBAAkB,eAAe;AAEpD,OAAK,WACH,OAAM,IAAI,MACR,CAAC,eAAe,EAAE,kBAAkB,SAAS,CAAC,oBAAoB,CAAC;EAIvE,MAAM,uBACJ,KAAK,iBAAiB,6BACpB,YACA,YACA,QACD;AAEH,SAAO;GACL,MAAM,UAAU;GAChB,YAAY;EACb;CACF;CAED,AAAO,kCACLI,SACQ;;AACR,SAAO,QACJ,IAAI,SAAC,QAAW;GACf,MAAM,EAAE,MAAM,YAAY,OAAO,GAAG;AACpC,UAAO,GAAG,6CAAS,UAAU,KAAK,CAAC,aAAa,EAAE,WAC/C,IAAIC,OAAK,mBAAmB,wBAAwB,CACpD,KAAK,MAAM,CAAC,GAAG,CAAC;EACpB,EAAC,CACD,KAAK,MAAM;CACf;AACF;8BAhFE,0BAAO,mBAAmB;8BAG1B,0BAAO,mBAAmB;gDAL5B,+BAAY"}