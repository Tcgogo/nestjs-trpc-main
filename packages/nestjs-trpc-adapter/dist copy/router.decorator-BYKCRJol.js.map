{"version":3,"file":"router.decorator-BYKCRJol.js","names":["args?: { alias?: string }"],"sources":["../lib/decorators/router.decorator.ts"],"sourcesContent":["import { applyDecorators, SetMetadata } from '@nestjs/common';\nimport { ROUTER_METADATA_KEY } from '../trpc.constants';\nimport { FileScanner } from '../scanners/file.scanner';\n\nconst fileScanner = new FileScanner();\n\n/**\n * Decorator that marks a class as a TRPC router that can receive inbound\n * requests and produce responses.\n *\n * An TRPC Router responds to inbound HTTP Requests and produces HTTP Responses.\n * It defines a class that provides the context for one or more related procedures that correspond to HTTP request methods and associated routes\n * for example `Query /trpc/userRouter.getUsers`, `Mutation /trpc/userRouter.createUser`.\n *\n *\n * @param {object} args configuration object specifying:\n * - `alias` - string that defines a router alias. The alias is used both in the auto schema file generation, and for the actual api access.\n *\n * @see [Routers](https://nestjs-trpc.io/docs/routers)\n *\n * @publicApi\n */\nexport function Router(args?: { alias?: string }): ClassDecorator {\n  const path = fileScanner.getCallerFilePath();\n  return applyDecorators(\n    ...[SetMetadata(ROUTER_METADATA_KEY, { alias: args?.alias, path })],\n  );\n}\n"],"mappings":";;;;;;;AAIA,MAAM,cAAc,IAAI;;;;;;;;;;;;;;;;;AAkBxB,SAAgB,OAAOA,MAA2C;CAChE,MAAM,OAAO,YAAY,mBAAmB;AAC5C,QAAO,mCACL,GAAG,CAAC,+BAAY,qBAAqB;EAAE,mDAAO,KAAM;EAAO;CAAM,EAAC,AAAC,EACpE;AACF"}